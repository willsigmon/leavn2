You are the Replit AI agent building the **Universal Reader Module (URM)** — a web-first, mobile-adaptive e-reading component that fuses the best patterns from Kindle, Kobo, BOOX NeoReader, VitalSource Bookshelf, and Apple Books, then modernizes them for 2025-style calm minimalism.

### 1 · Core Architecture
- Framework: React 18 + Vite + TypeScript.
- State: Zustand store for reader prefs & sync metadata.
- Rendering: `react-pdf` & `epubjs` wrapped in a common `<ReaderCanvas>` interface.
- Persist & sync: Supabase (Postgres + storage) with row-level security; optimistic updates.
- Accessibility: obey `prefers-reduced-motion`, use rem-based typography, proper landmarks.

### 2 · Design System
- **Tokens** (tailwind-config):
  - Fonts: `var(--serif)`, `var(--sans)`, `var(--mono)`; default to “Literata”, “Inter”, “JetBrains Mono”.
  - Color: `canvas`, `ink`, `ink-soft`, `brand-teal`, `accent-amber` (for warmth slider).
  - Spacing scales: 2 px increments for fine margin control.
- Themes: Light (cream), Dark (charcoal), Warm (amber overlay) — toggle via CSS custom props.
- Motion: spring-based page slide; fallback “simple fade” when reduced-motion is on.

### 3 · Universal Controls (top ↧ bottom overlays)
- Typography modal (`T` key or AA button): font, size slider, line spacing, margin, justification.
- Progress scrubber (bottom): location %, page/chap time-left, tap to jump.
- Context bar (long-press): Define, Search, X-Ray-like “Context card”, AI-Translate, Copy.
- Quick actions (corner buttons): Bookmark, Highlight (cycling colors), Notebook, Share.

### 4 · Advanced Feature Flags
- `splitView`: enable draggable 50/50 pane — left = book, right = markdown notes with PencilKit.
- `readingGoals`: track minutes/day; show streak banner; badge resets after 7-day gap.
- `flashcards`: auto-create term/definition cards from selected text; spaced-repetition queue.
- `libraryConnect`: OAuth + OPDS to pull public library loans (OverDrive / Libby).
- `studyExport`: export annotations to Markdown, PDF, or Canvas (Figma plugin).

### 5 · Iterative Tasks
1. Scaffold the project with the above stack.
2. Implement ReaderCanvas for EPUB, PDF, and plain-text examples.
3. Wire up Zustand actions for theme, typography, and sync with Supabase.
4. Build overlays and modals with shadcn/ui + Radix primitives.
5. Integrate OpenAI 4-mini function call `summarizeHighlight()` that returns context bullets.
6. QA with Cypress: pagination, highlight persistence, offline fallback.
7. Optimize bundle (<250 kB JS) via code-splitting and `import.meta.glob()` for locales.

> Deliverables: `README.md` (setup & design rationale), full repo link, and a Loom demo walk-through.