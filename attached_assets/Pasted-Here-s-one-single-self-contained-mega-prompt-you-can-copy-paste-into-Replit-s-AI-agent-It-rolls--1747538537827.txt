Here’s one single, self-contained “mega-prompt” you can copy-paste into Replit’s AI agent. It rolls everything together—architecture, immutable Bible text, lens-driven sidebar, AI caching, map overlay, and the ⅔–⅓ layout.

You are Replit AI. Build the **Universal Reader Module (URM)**—a web-first, mobile-adaptive Bible reader that fuses Kindle/Kobo/BOOX/VitalSource/Apple-Books best practices while guaranteeing the Bible text stays word-for-word intact.

────────────────────────────────────────
A · TECH STACK
• React 18 + Vite + TypeScript
• Tailwind + shadcn/ui (Radix) design system
• State: Zustand
• Data + Auth + Realtime + Edge: Supabase
• AI: OpenAI 4-mini (fallback 4-nano for small prompts)
• Maps: Leaflet w/ OpenHistoricalMap tiles (fallback static PNG)

────────────────────────────────────────
B · LAYOUT GRID
`md:grid-cols-[2fr_1fr]`  →  Bible = ⅔ width, Companion sidebar = ⅓ width.  
Sidebar collapses to bottom sheet on screens < 768 px.

────────────────────────────────────────
C · BIBLE CANVAS  (immutable)
1. Render KJV + WEB EPUBs/PDF via `epubjs` / `react-pdf`.  
2. Each verse wrapped in `<span data-ref="GEN-1:3">`.  
3. Verse click = single-select; **Shift+Click** appends to `selectedRefs[]`.  
4. Highlight active verses with `ring-2 ring-accent-amber/40`.

────────────────────────────────────────
D · COMPANION SIDEBAR  (AI Lens Insights)
Goal → Inject lens-specific commentary **without altering scripture**.

State (Zustand):
```ts
type LensState = {
  activeLens: "Jewish"|"Catholic"|"Orthodox"|"Protestant"|"Kids"|"GenZ"|"Atheist";
  selectedRefs: string[];
  insights?: LensInsights;   // commentaryHTML, mapMarkers[], sources[]
};

Fetch flow:
	1.	Debounce 250 ms after selectedRefs change.
	2.	Check Supabase lens_sidebar_cache (user_id + lens + refsHash).
	3.	Cache hit → return JSON immediately.
	4.	Cache miss → call OpenAI function verseInsights():

{
  "name":"verseInsights",
  "description":"Return commentary & geodata for verses through a theological lens.",
  "parameters":{
    "type":"object",
    "properties":{
      "lens":{"type":"string","enum":["Jewish","Catholic","Orthodox","Protestant","Kids","GenZ","Atheist"]},
      "verseRefs":{"type":"array","items":{"type":"string"}},
      "baseText":{"type":"string"}
    },
    "required":["lens","verseRefs","baseText"]
  }
}

	5.	Save result back to lens_sidebar_cache (JSONB).
	6.	Broadcast via supabase.realtime so other devices update live.

Sidebar UI:
	•	<InsightPanel> renders commentaryHTML.
	•	<MapPane> shows Leaflet map with mapMarkers[] (historical tiles default).
	•	“Sources” accordion lists scholarly refs.

────────────────────────────────────────
E · UNIVERSAL READER CONTROLS
• Top bar: AA (typography modal), Theme toggle (Light/Dark/Warm), Search.
• Bottom scrubber: location %, time/page in chapter, draggable thumb.
• Long-press context menu: Define, Search, Copy, “X-Ray” cross-refs.
• Highlight colors cycle via single tap; notes pop-over markdown editor.
• Settings stored in localStorage and synced to Supabase on login.

────────────────────────────────────────
F · AI + CACHE POLICIES
• One OpenAI call per unique (user_id, lens, verse set); reuse thereafter.
• Use 4-mini unless baseText.length < 600 → 4-nano to save tokens.
• Query cache staleTime: 7 days. Manual “Refresh AI Lens” button invalidates row.

────────────────────────────────────────
G · TASK LIST (order Replit agent should execute)
	1.	Scaffold repo with Vite React + Tailwind template.
	2.	Add Supabase project keys (env).
	3.	Implement BibleCanvas with verse span instrumentation.
	4.	Build Zustand store + React Query hooks (useLensContent).
	5.	Create Supabase tables: lens_sidebar_cache (RLS enabled).
	6.	Wire OpenAI function call + edge function refresh_lens.
	7.	Implement Companion sidebar components (Panel + Map).
	8.	Add typography & theme modals; bottom progress scrubber.
	9.	Integrate Leaflet with historical layer toggle.
	10.	Write Cypress tests: verse selection, cache hit/miss timing, layout breakpoints.
	11.	Optimize bundle (< 250 kB JS gzip) via import.meta.glob + code-splitting.
	12.	Ship README with design rationale and Loom demo.

────────────────────────────────────────
H · DEFINITION OF DONE
✅ Bible text never changes.
✅ Sidebar commentary appears ≤ 3 s on first request, < 50 ms thereafter.
✅ Selecting multiple verses merges commentary intelligently.
✅ Layout stable at ⅔ / ⅓ on desktop, collapses gracefully on mobile.
✅ All tests pass (npm run test).
✅ Bundle size & lighthouse scores meet targets.

BEGIN IMPLEMENTATION NOW.

Paste that block into Replit’s AI, hit **Generate**, and it will spin up the full reader exactly as specified.