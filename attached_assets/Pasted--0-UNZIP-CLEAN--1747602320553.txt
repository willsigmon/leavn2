######################################################################
# 0.  UNZIP + CLEAN
######################################################################
unzip -o server.zip -d .          # expands to ./server/…
find server -name "__MACOSX" -o -name "._*" | xargs rm -rf

######################################################################
# 1.  PACKAGE & TS CONFIG  – (idempotent)
######################################################################
write_file server/package.json <<'JSON'
{
  "name": "leavn-server",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "nodemon --exec ts-node --esm server/index.ts",
    "start": "node --enable-source-maps --loader ts-node/esm server/index.ts"
  },
  "dependencies": {
    "cors": "^2",
    "dotenv": "^16",
    "express": "^4",
    "openai": "^4"
  },
  "devDependencies": {
    "@types/express": "^4",
    "@types/node": "^20",
    "nodemon": "^3",
    "ts-node": "^10",
    "typescript": "^5"
  }
}
JSON

write_file server/tsconfig.json <<'JSON'
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "rootDir": ".",
    "outDir": "dist",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "strict": true,
    "baseUrl": ".",
    "paths": { "@/*": ["*"] }
  },
  "include": ["**/*.ts"]
}
JSON

######################################################################
# 2.  PATCH COMMON CRASHES
######################################################################
# 2-A  __dirname / __filename in ESM
perl -0777 -i -pe '
  s{(^\s*)(const\s+__dirname\s*=.*$)}{}mgs;         # remove rogue attempts
' $(grep -rl "__dirname\b" server | tr '\n' ' ') || true

grep -qxF 'import { fileURLToPath } from "node:url";' server/utils/paths.ts 2>/dev/null || cat > server/utils/paths.ts <<'TS'
import { fileURLToPath } from "node:url";
import { dirname } from "node:path";
export const __filename = fileURLToPath(import.meta.url);
export const __dirname  = dirname(__filename);
TS

# Replace bare uses with import
grep -rl --exclude=utils/paths.ts "__dirname" server \
  | xargs -r perl -0777 -i -pe 's/\b__dirname\b/__dirname/g;'  # no-op, but keeps sed pattern

# 2-B  Guard missing OPENAI_API_KEY
FILE="server/rag-bible.ts"
grep -qxF '/* RAG key guard */' "$FILE" 2>/dev/null || perl -0777 -i -pe '
  next if /RAG key guard/;
  s{(import .*openai.*;\s*)}{
$1\n/* RAG key guard */\nif (!process.env.OPENAI_API_KEY) {\n  console.warn("OPENAI_API_KEY missing – skipping embedding generation");\n  export async function initBibleRAG() {}\n  return;\n}\n}m;
' "$FILE" || true

######################################################################
# 3.  ENSURE PORT 5000 & ENV TEMPLATE
######################################################################
write_file .replit <<'CONF'
run = "npm --prefix server run start"
env = ["PORT=5000"]
CONF

grep -qxF 'OPENAI_API_KEY=' server/.env.example 2>/dev/null || {
  echo -e 'OPENAI_API_KEY=\nPORT=5000' > server/.env.example
}

######################################################################
# 4.  SMOKE TEST  – should log “Server listening on 5000”
######################################################################
pushd server >/dev/null
npm i --silent
node --loader ts-node/esm index.ts &
PID=$!
sleep 3
kill $PID
popd >/dev/null
